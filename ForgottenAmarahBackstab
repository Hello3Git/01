local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- GUI toggle button
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AutoBackstabToggleGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = game.CoreGui

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 170, 0, 40)
toggleButton.Position = UDim2.new(0, 100, 0, 100)
toggleButton.Text = "Auto Backstab (OFF)"
toggleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.BorderSizePixel = 1
toggleButton.AutoButtonColor = true
toggleButton.Parent = screenGui
toggleButton.Active = true
toggleButton.Draggable = true

-- Variables
local autoEnabled = false
local cooldown = false
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local hrp = nil

-- Function to update character & HRP on respawn
local function onCharacterAdded(char)
	character = char
	hrp = nil
	character:WaitForChild("HumanoidRootPart", 5)
	hrp = character:FindFirstChild("HumanoidRootPart")
end

LocalPlayer.CharacterAdded:Connect(onCharacterAdded)
onCharacterAdded(character) -- initialize on first spawn

-- Toggle logic
toggleButton.MouseButton1Click:Connect(function()
	autoEnabled = not autoEnabled
	toggleButton.Text = autoEnabled and "Auto Backstab (ON)" or "Auto Backstab (OFF)"
end)

-- Backstab ability
local function teleportAndUseAbility(targetPlayer)
	if not character or not hrp then return end
	local targetHRP = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
	if not targetHRP then return end

	-- Teleport 1.6 studs behind target
	local backCFrame = targetHRP.CFrame * CFrame.new(0, 0, 1.6)
	hrp.CFrame = backCFrame

	-- Instantly activate ability
	local args = {
		"UseActorAbility",
		"Dagger"
	}
	local success, err = pcall(function()
		ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
	end)
	if not success then
		warn("Failed to fire ability:", err)
	end
end

-- Auto activation loop
RunService.Heartbeat:Connect(function()
	if not autoEnabled or cooldown then return end
	if not character or not hrp then return end

	local highestHealth = -1
	local targetPlayer = nil
	local healthTable = {}

	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character then
			local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
			local theirHRP = player.Character:FindFirstChild("HumanoidRootPart")
			if humanoid and theirHRP then
				table.insert(healthTable, humanoid.Health)
				if humanoid.Health > highestHealth then
					highestHealth = humanoid.Health
					targetPlayer = player
				end
			end
		end
	end

	local allSame = true
	for i = 2, #healthTable do
		if healthTable[i] ~= healthTable[1] then
			allSame = false
			break
		end
	end

	if allSame or not targetPlayer or not targetPlayer.Character then return end

	local targetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
	if not targetHRP then return end

	local distance = (hrp.Position - targetHRP.Position).Magnitude
	if distance <= 3.5 then
		cooldown = true
		teleportAndUseAbility(targetPlayer)
		task.delay(30, function()
			cooldown = false
		end)
	end
end)
