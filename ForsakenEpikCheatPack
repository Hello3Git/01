-- ======== 1. LOCK ON (Highest HP Target, Respawn-Safe) ======== --
local player = game.Players.LocalPlayer

local function setupLockOn()
    local cam = workspace.CurrentCamera
    local remote = game:GetService("ReplicatedStorage")
        :WaitForChild("Modules")
        :WaitForChild("Network")
        :WaitForChild("RemoteEvent")

    local function getHighestHealthChar()
        local best, target = -math.huge, nil
        for _, plr in ipairs(game.Players:GetPlayers()) do
            if plr ~= player and plr.Character and plr.Character:FindFirstChild("Humanoid") then
                local hp = plr.Character.Humanoid.Health
                if hp > best then
                    best = hp
                    target = plr.Character
                end
            end
        end
        return target
    end

    local function lockOn(duration)
        local target = getHighestHealthChar()
        if not target or not target:FindFirstChild("HumanoidRootPart") then return end
        local hrp = target.HumanoidRootPart
        local endTime = tick() + duration
        while tick() < endTime do
            cam.CFrame = CFrame.new(cam.CFrame.Position, hrp.Position)
            task.wait()
        end
    end

    remote.OnClientEvent:Connect(function(a, b)
        if a == "UseActorAbility" and b == "NoLongerReady" then
            lockOn(1.6) -- respawn-safe lockon
        end
    end)

    -- Example auto-fire
    remote:FireServer("UseActorAbility","NoLongerReady")
end

-- Run once
setupLockOn()

-- Run again after respawn
player.CharacterAdded:Connect(function()
    task.wait(1) -- wait for new character/camera
    setupLockOn()
end)

-- ======== 2. STAMINA PATCH ======== --
local function waitFor(child, name, timeout)
    return child:WaitForChild(name, timeout or 10)
end

local function patchStamina()
    local character = player.Character or player.CharacterAdded:Wait()
    local success, err = pcall(function()
        local speedMultFolder = waitFor(character, "SpeedMultipliers")
        local fovMultFolder = waitFor(character, "FOVMultipliers")

        local speedValue = speedMultFolder:FindFirstChild("Sprinting")
        local fovValue = fovMultFolder:FindFirstChild("Sprinting")

        if speedValue then speedValue.Value = speedValue.Value end
        if fovValue then fovValue.Value = fovValue.Value end

        for _, module in pairs(getgc(true)) do
            if typeof(module) == "table" and rawget(module, "StaminaLoss") then
                module.StaminaLoss = 0
                print("[✓] Patched StaminaLoss to 0")
            end
            if typeof(module) == "table" and rawget(module, "StaminaLossDisabled") then
                module.StaminaLossDisabled = true
                print("[✓] Disabled StaminaLoss")
            end
        end
    end)

    if not success then
        warn("[!] Failed to patch stamina:", err)
    else
        print("[✓] Stamina patch executed successfully")
    end
end

patchStamina()
player.CharacterAdded:Connect(function() task.wait(1) patchStamina() end)

-- ======== 3. ESP ======== --
pcall(function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Gazer-Ha/Forsakontol/refs/heads/main/Esp%20fix"))()
end)

-- ======== 4. CROSSHAIR (Fixed) ======== --
local cam = workspace:WaitForChild("CurrentCamera")

local crosshairSettings = {
    color = Color3.fromRGB(255, 128, 255),
    thickness = 2,
    length = 8,
    opacity = 1,
    x_offset = 0,
    y_offset = 0,
    recenter = true
}

-- Cleanup old crosshair
if getgenv().crosshair_x and getgenv().crosshair_x.Line then
    getgenv().crosshair_x.Line:Remove()
end
if getgenv().crosshair_y and getgenv().crosshair_y.Line then
    getgenv().crosshair_y.Line:Remove()
end
if getgenv().crosshair_x and getgenv().crosshair_x.Connection then
    getgenv().crosshair_x.Connection:Disconnect()
end
if getgenv().crosshair_y and getgenv().crosshair_y.Connection then
    getgenv().crosshair_y.Connection:Disconnect()
end

getgenv().crosshair_x, getgenv().crosshair_y = {}, {}

local function draw(type, props)
    local obj = Drawing.new(type)
    for i, v in pairs(props) do
        obj[i] = v
    end
    return obj
end

-- Create horizontal line
getgenv().crosshair_x.Line = draw("Line", {
    From = Vector2.new((cam.ViewportSize.X/2) - crosshairSettings.length, (cam.ViewportSize.Y/2)),
    To = Vector2.new((cam.ViewportSize.X/2) + crosshairSettings.length, (cam.ViewportSize.Y/2)),
    Thickness = crosshairSettings.thickness,
    Color = crosshairSettings.color,
    Transparency = crosshairSettings.opacity,
    Visible = true
})

-- Create vertical line
getgenv().crosshair_y.Line = draw("Line", {
    From = Vector2.new((cam.ViewportSize.X/2), (cam.ViewportSize.Y/2) - crosshairSettings.length),
    To = Vector2.new((cam.ViewportSize.X/2), (cam.ViewportSize.Y/2) + crosshairSettings.length),
    Thickness = crosshairSettings.thickness,
    Color = crosshairSettings.color,
    Transparency = crosshairSettings.opacity,
    Visible = true
})

-- Recenter on resize
if crosshairSettings.recenter then
    getgenv().crosshair_x.Connection = cam:GetPropertyChangedSignal("ViewportSize"):Connect(function()
        getgenv().crosshair_x.Line.From = Vector2.new((cam.ViewportSize.X/2) - crosshairSettings.length, (cam.ViewportSize.Y/2))
        getgenv().crosshair_x.Line.To = Vector2.new((cam.ViewportSize.X/2) + crosshairSettings.length, (cam.ViewportSize.Y/2))
    end)
    getgenv().crosshair_y.Connection = cam:GetPropertyChangedSignal("ViewportSize"):Connect(function()
        getgenv().crosshair_y.Line.From = Vector2.new((cam.ViewportSize.X/2), (cam.ViewportSize.Y/2) - crosshairSettings.length)
        getgenv().crosshair_y.Line.To = Vector2.new((cam.ViewportSize.X/2), (cam.ViewportSize.Y/2) + crosshairSettings.length)
    end)
end
